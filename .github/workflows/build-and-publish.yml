name: Build and Publish Packages

on:
  workflow_dispatch:
    inputs:
      versionType:
        description: 'Version type for npm publish'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor

jobs:
  build-and-publish:
    runs-on:
      group: default
    name: Build and Publish Core and Starter-Kit
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_ACTION_TOKEN }}
          
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org/'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies and build packages
        run: |
          pnpm install --no-frozen-lockfile
          pnpm run build
          
      - name: Check for changes
        run: |
          git config --global user.name ${{secrets.GIT_DEVOPS_USERNAME}}
          git config --global user.email "${{secrets.GIT_DEVOPS_EMAIL}}@users.noreply.github.com"
          git add .
          if git diff --cached --name-only | grep .; then
            echo "NEW_CHANGES=true" >> $GITHUB_ENV
          else
            echo "NEW_CHANGES=false" >> $GITHUB_ENV
          fi
          
      - name: Commit build artifacts
        if: ${{ env.NEW_CHANGES == 'true' }}
        run: |
          git status
          git commit -m "build(core): ðŸ“¦ Auto build assets"
          git push
          
      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_PUBLISH_TOKEN}}
        if: ${{ env.NEW_CHANGES == 'true' || github.event.inputs.versionType }}
        run: |
          # Determine version bump type
          VERSION_TYPE=${{ github.event.inputs.versionType || 'patch' }}
          
          # Check current versions
          echo "Current core version: $(node -p "require('./packages/core/package.json').version")"
          echo "Current starter-kit version: $(node -p "require('./packages/starter-kit/package.json').version")"
          
          # Use npm to version packages in workspace (pnpm -r version doesn't work as expected)
          (cd packages/core && npm version $VERSION_TYPE --no-git-tag-version)
          (cd packages/starter-kit && npm version $VERSION_TYPE --no-git-tag-version)
          
          # Check new versions
          echo "New core version: $(node -p "require('./packages/core/package.json').version")"
          echo "New starter-kit version: $(node -p "require('./packages/starter-kit/package.json').version")"
          
          # Commit version changes back to repository
          git add .
          NEW_VERSION=$(node -p "require('./packages/core/package.json').version")
          git commit -m "chore(release): ðŸ”–bump version to $NEW_VERSION"
          git push
          
          # Publish both core and starter-kit packages (form-builder-mock is excluded)
          pnpm publish --filter "@salla.sa/twilight-bundles" --filter "@salla.sa/twilight-bundles-starter-kit" --access public --no-git-checks --force

      - name: Setup OSS
        uses: manyuanrong/setup-ossutil@v2.0
        with:
          endpoint: ${{ secrets.OSS_ENDPOINT }}
          access-key-id: ${{ secrets.OSS_ACCESS_KEY }}
          access-key-secret: ${{ secrets.OSS_ACCESS_SECRET }}
          
      - name: upload Assets
        run: | 
          ossutil cp packages/core/dist/twilight-bundles.cjs oss://cdn-salla-network/js/twilight-bundles/latest/twilight-bundles.cjs --force
          ossutil cp packages/core/dist/twilight-bundles.js oss://cdn-salla-network/js/twilight-bundles/latest/twilight-bundles.js --force
          echo "âœ… Assets uploaded successfully"
          
      - name: Clear Cache for latest assets
        shell: bash
        continue-on-error: false
        run: |
          curl "https://api.cloudflare.com/client/v4/zones/${{ env.CF_ZONE_ID_SALLA_NETWORK }}/purge_cache" \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer ${{ env.CF_CLEAR_CACHE_SALLA_NETWORK }}" \
            -d '{
              "prefixes": [
                "cdn.salla.network/js/twilight-bundles/latest"
              ]
            }'
